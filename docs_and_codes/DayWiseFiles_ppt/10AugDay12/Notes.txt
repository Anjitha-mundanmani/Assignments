Logical Operator:
and -> for and operation on conditions.
or -> for or operation on conditions.Its lazy evaluation

String:
     #87654321  Negative index Use -1,-2,-3 and so on
     #01234567  Postive index
name="Siddhant"
        # 10987654321   Negative index Use -1,-2,-3 and so on
         # 0123456789    Positive index
full_name="Siddhant v"

#Length of string
len(name)


print("_______Accessing index of string__________")
print(name[0]) #S
print(name[2]) #d
print(full_name[8]) # 
#print(name[11]) #Error: IndexError: string index out of range

print("______SLicing of string______________")
print(name[0:3]) #Sid  Syntax:name[startIndex:endindex+1] WHY? because endindex is excluded from output
print(name[2:5]) #ddh
print(name[4:7]) #han
print("name[4:15]",name[4:15])

print("_________Slicing shortcuts_________________")
print(name[:3]) #Sid   If index starts from 0,You dont need to mention it
print(name[4:]) #hant  If you want last part of string then dont need to mention closing  index
print(name[:])

print("______Negative index______________________")
print(name[-1]) #t
print(name[-8]) #S
#print(name[-9]) #Error : IndexError: string index out of range
print("name[-1:-4] =>",name[-1:-4]) # Nooutput
print("name[-4:-1] =>",name[-4:-1]) #han
print("name[:-1] => ",name[:-1]) #Siddhan
print("name[-5:] => ",name[-5:]) #dhant
print("name[7:4] =>",name[7:4]) # No output
print("name[2:-3] =>",name[2:-3]) #ddh
print("name[-6:5] =>",name[-6:5]) #ddh
print("name[-5:1] =>",name[-5:1]) #No output

print("__________Steps_______________________________")
alpha="abcdefghij"
      #0123456789 Positive index
     #10987654321 Negative index
print("name[0:6:1] =>",name[0:6:1])  #Siddha
print("name[0:6:2] =>",name[0:6:2])
print("alpha[0:9:2] =>",alpha[0:9:2]) #acegi
print("alpha[0:-5:4] =>",alpha[0:-5:2]) # 
print("alpha[1:6:-1] =>",alpha[1:6:-1]) #Negative step value will reverse the string. It'll fetch in reverse direction
print("alpha[4:1:-1] =>",alpha[4:1:-1]) #edc
print("alpha[6:2:-1] =>",alpha[6:2:-1]) #gfed
print("alpha[-4:1:-1] =>",alpha[-4:1:-1]) #gfedc
print("alpha[::-1] =>",alpha[::-1]) #Reverse the entire string
print("alpha[:3:-2] =>",alpha[:3:-2]) #jhf  
#In negative step value If start index is empty It consider that as a last index 
#And If endindex is empty is empty It'll conside that as a first index
_______________________________________________________________________________________________________
String functions:

#String functions:

name = "siddhant"
full_name = "SIDDHANT V"
#Syntax: variable.function(arg)

print(name.upper())  #Converts string to upper case
print(full_name.lower()) #Converts string to lower case
print(name.title()) #Converts first letter of string to upper case
print(name.isdigit()) #isdigit() returns true or false if string is digits
print("10".isdigit()) #true
print(name.islower()) # islower() returns true or false is string is in lower case or not
print(name.isupper()) # isupper() returns true or false is string is in upper case or not

__________________________________________________________________________________________________________

String Concatination:
#how to join two strings
fst_name = "SIddhant"
lst_name = "Verma"
full_name = fst_name + lst_name #Use + operator to join string
print(full_name)

full_name = fst_name + " " + lst_name
print(full_name) 

print("______Other test_____________________")
x = 10
y = "20"
a = '30'
b = 40

#z = x + y #Error TypeError: unsupported operand type(s) for +: 'int' and 'str'
#print(z)
#z = y + x #Error TypeError: can only concatenate str (not "int") to str
#print(z)

z = y + a #2030
print(z)

z = x + b #Valid it'll perform summation
print(z)
print("____________________________________________")
full_name = "siddhant" "verma" #No Error Its concatonation
print(full_name) 
full_name = fst_name lst_name #SyntaxError  If you are using variable name use + operator else you can " " to perform concatination
print(full_name)
full_name = "siddhant","verma" #No Error it assigns tuple
print(full_name)

_________________________________________________________________________________________________
If-Else->
Don't use space key to indent,Use Tab 
Use if-else to decide which part of code you want to execute
Simple if->
if expression :
	statements

Expression must be evaluated to some single value.Expression should ve evaluated to true or false.

if-else ->
Syntax:
if expression:
	statements
else:
	statements

elif->
if (num == 18):
        print("Now You can vote")
elif (num > 18):
        print("You can vote")
else:
        print("You can't vote")

_________________________________________________________________________
Loops:
while ->
while expression:
	statements

Expression should ve evaluated to true or false.

How to come out of while loop at certain condition?
use break


for ->

for variable in range/object:
	statements
__________________________________________________________________________________
In Python we got few data structure
List
Tuple
Dictionary
Set

________________________________________________________________________________
List:Its simple data structure like array
It stores hetrogenous data
Syntax: ["Siddhant","Anubhav","Shweta","Rajat"]
	[10,20,30,40,50,60]
	["Sid",20,10.5]
	["sid",[10,20],["Neha",30]]
Length of a list:
len(list_variable)


Errors:
AttributeError: 'str' object has no attribute 'toUpper'
->There's no function with name toUpper()

Error: IndexError: string index out of range
->Wrong index .Index is bigger than  the string length

Error: TypeError: unsupported operand type(s) for +: 'int' and 'str'
->If you are adding or concatnating integer and string
->If first operand is int then python consider as a addition operation

Error:TypeError: can only concatenate str (not "int") to str
->If you are adding or concatnating integer and string 
->If first operand is str then python consider as a concatination operation

Error:NameError: name 'z' is not defined
->Means you haven't assigned anything to z.You must assign before using variable





































